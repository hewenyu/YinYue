name: Build and Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            qt_arch: gcc_64
            artifact_name: YinYue-linux
            package_type: DEB
            qt_host: linux
          - os: windows-latest
            qt_arch: win64_msvc2019_64
            artifact_name: YinYue-windows
            package_type: NSIS
            qt_host: windows
          - os: macos-latest
            qt_arch: clang_64
            artifact_name: YinYue-macos
            package_type: DMG
            qt_host: mac

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: ${{ matrix.qt_host }}
        target: 'desktop'
        arch: ${{ matrix.qt_arch }}
        cache: true

    # Linux 依赖安装
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # 首先安装基础开发工具
        sudo apt-get install -y build-essential cmake ninja-build
        
        # 安装基础库依赖
        sudo apt-get install -y libunwind-dev libgl1-mesa-dev \
          libpulse-dev libasound2-dev
        
        # 安装 GStreamer 依赖
        sudo apt-get install -y libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav
        
        # 安装 Qt5 依赖
        sudo apt-get install -y qtbase5-dev \
          qtmultimedia5-dev \
          qttools5-dev \
          qttools5-dev-tools \
          libqt5multimedia5-plugins

    # Windows 依赖安装
    - name: Setup Windows Dependencies
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Install Windows Build Tools
      if: runner.os == 'Windows'
      run: |
        # 安装 Ninja
        choco install ninja
        
        # 设置 Visual Studio 环境变量
        echo "Adding Visual Studio Environment Variables"
        echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build" >> $GITHUB_PATH
        
        # 安装其他必要工具
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
      shell: bash

    # macOS 依赖安装
    - name: Install macOS Dependencies
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja imagemagick
        
        # 创建 DMG 资源目录
        mkdir -p resources
        
        # 创建一个简单的背景图片（如果没有自定义背景）
        convert -size 540x380 xc:none -draw "roundrectangle 20,20 520,360 20,20" \
                -fill white -stroke '#666666' resources/dmg_background.png

    - name: Configure CMake
      shell: bash
      run: |
        mkdir -p build
        cd build
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Windows 特定的 CMake 配置
          cmake -GNinja -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl ..
        else
          # Linux 和 macOS 的配置
          cmake -GNinja ..
        fi
      env:
        # Windows 特定环境变量
        CMAKE_PREFIX_PATH: ${{ runner.workspace }}/Qt/Qt5.15.2/msvc2019_64
        CC: cl.exe
        CXX: cl.exe

    - name: Build
      shell: bash
      run: |
        cd build
        ninja

    - name: Package
      shell: bash
      run: |
        cd build
        cpack -G ${{ matrix.package_type }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          build/*.deb
          build/*.exe
          build/*.dmg

    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/*.deb
          build/*.exe
          build/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 